require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/rides", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Ride. As you add validations to Ride, be sure to
  # adjust the attributes here as well.
  let(:college) {create(:college)}
  let(:driver) {create(:user)}
  let(:valid_attributes) {
    {
      observation: " ", seats: 4, date: Date.today + 1, time: Time.now, 
      to_college: false, active: true, price: 0.0, driver: driver, college_id: college.id
    }
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  describe "GET user/:id/index" do
    it "renders a successful response" do
      ride = create(:ride, driver: driver, college_id: college.id)

      get user_rides_path(driver)
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    xit "renders a successful response" do
      ride = Ride.create! valid_attributes
      get ride_url(ride)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    xit "renders a successful response" do
      get new_ride_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    xit "renders a successful response" do
      ride = Ride.create! valid_attributes
      get edit_ride_url(ride)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      xit "creates a new Ride" do
        expect {
          post rides_url, params: { ride: valid_attributes }
        }.to change(Ride, :count).by(1)
      end

      xit "redirects to the created ride" do
        post rides_url, params: { ride: valid_attributes }
        expect(response).to redirect_to(ride_url(Ride.last))
      end
    end

    context "with invalid parameters" do
      xit "does not create a new Ride" do
        expect {
          post rides_url, params: { ride: invalid_attributes }
        }.to change(Ride, :count).by(0)
      end

      xit "renders a successful response (i.e. to display the 'new' template)" do
        post rides_url, params: { ride: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      xit "updates the requested ride" do
        ride = Ride.create! valid_attributes
        patch ride_url(ride), params: { ride: new_attributes }
        ride.reload
        skip("Add assertions for updated state")
      end

      xit "redirects to the ride" do
        ride = Ride.create! valid_attributes
        patch ride_url(ride), params: { ride: new_attributes }
        ride.reload
        expect(response).to redirect_to(ride_url(ride))
      end
    end

    context "with invalid parameters" do
      xit "renders a successful response (i.e. to display the 'edit' template)" do
        ride = Ride.create! valid_attributes
        patch ride_url(ride), params: { ride: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    xit "destroys the requested ride" do
      ride = Ride.create! valid_attributes
      expect {
        delete ride_url(ride)
      }.to change(Ride, :count).by(-1)
    end

    xit "redirects to the rides list" do
      ride = Ride.create! valid_attributes
      delete ride_url(ride)
      expect(response).to redirect_to(rides_url)
    end
  end
end
